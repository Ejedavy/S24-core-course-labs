name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.1
  SQLX_FEATURES: 'rustls,postgres'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_rust
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_rust:
              - 'app_rust/**'
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        if: steps.filter.outputs.changes == 'true'
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        if: steps.filter.outputs.changes == 'true'
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Check sqlx-data.json is up-to-date
        if: steps.filter.outputs.changes == 'true'
        run: |
          cargo sqlx prepare --workspace --check
      - name: Run tests
        if: steps.filter.outputs.changes == 'true'
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_rust
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_rust:
              - 'app_rust/**'
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        if: steps.filter.outputs.changes == 'true'
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_rust
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_rust:
              - 'app_rust/**'
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        if: steps.filter.outputs.changes == 'true'
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        if: steps.filter.outputs.changes == 'true'
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Linting
        if: steps.filter.outputs.changes == 'true'
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_rust
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_rust:
              - 'app_rust/**'
      - uses: dtolnay/rust-toolchain@stable
      - name: Install libpq
        if: steps.filter.outputs.changes == 'true'
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install tarpaulin
        if: steps.filter.outputs.changes == 'true'
        run: cargo install cargo-tarpaulin
      - name: Install sqlx-cli
        if: steps.filter.outputs.changes == 'true'
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        if: steps.filter.outputs.changes == 'true'
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Generate code coverage
        if: steps.filter.outputs.changes == 'true'
        run: cargo tarpaulin --verbose --workspace

  docker:
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    needs:
      - test
      - clippy
      - fmt
    if: ${{ needs.test.result == 'success' && needs.clippy.result == 'success' && needs.fmt.result == 'success'}}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app_python
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app_python:latest
